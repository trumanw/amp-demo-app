/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateParameterSpaceArgs } from "./CreateParameterSpaceArgs";
import { UpdateParameterSpaceArgs } from "./UpdateParameterSpaceArgs";
import { DeleteParameterSpaceArgs } from "./DeleteParameterSpaceArgs";
import { ParameterSpaceCountArgs } from "./ParameterSpaceCountArgs";
import { ParameterSpaceFindManyArgs } from "./ParameterSpaceFindManyArgs";
import { ParameterSpaceFindUniqueArgs } from "./ParameterSpaceFindUniqueArgs";
import { ParameterSpace } from "./ParameterSpace";
import { ExperimentFindManyArgs } from "../../experiment/base/ExperimentFindManyArgs";
import { Experiment } from "../../experiment/base/Experiment";
import { ParameterSpaceService } from "../parameterSpace.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ParameterSpace)
export class ParameterSpaceResolverBase {
  constructor(
    protected readonly service: ParameterSpaceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ParameterSpace",
    action: "read",
    possession: "any",
  })
  async _parameterSpacesMeta(
    @graphql.Args() args: ParameterSpaceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ParameterSpace])
  @nestAccessControl.UseRoles({
    resource: "ParameterSpace",
    action: "read",
    possession: "any",
  })
  async parameterSpaces(
    @graphql.Args() args: ParameterSpaceFindManyArgs
  ): Promise<ParameterSpace[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ParameterSpace, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ParameterSpace",
    action: "read",
    possession: "own",
  })
  async parameterSpace(
    @graphql.Args() args: ParameterSpaceFindUniqueArgs
  ): Promise<ParameterSpace | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParameterSpace)
  @nestAccessControl.UseRoles({
    resource: "ParameterSpace",
    action: "create",
    possession: "any",
  })
  async createParameterSpace(
    @graphql.Args() args: CreateParameterSpaceArgs
  ): Promise<ParameterSpace> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParameterSpace)
  @nestAccessControl.UseRoles({
    resource: "ParameterSpace",
    action: "update",
    possession: "any",
  })
  async updateParameterSpace(
    @graphql.Args() args: UpdateParameterSpaceArgs
  ): Promise<ParameterSpace | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ParameterSpace)
  @nestAccessControl.UseRoles({
    resource: "ParameterSpace",
    action: "delete",
    possession: "any",
  })
  async deleteParameterSpace(
    @graphql.Args() args: DeleteParameterSpaceArgs
  ): Promise<ParameterSpace | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Experiment], { name: "experiments" })
  @nestAccessControl.UseRoles({
    resource: "Experiment",
    action: "read",
    possession: "any",
  })
  async resolveFieldExperiments(
    @graphql.Parent() parent: ParameterSpace,
    @graphql.Args() args: ExperimentFindManyArgs
  ): Promise<Experiment[]> {
    const results = await this.service.findExperiments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
