/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSearchSpaceArgs } from "./CreateSearchSpaceArgs";
import { UpdateSearchSpaceArgs } from "./UpdateSearchSpaceArgs";
import { DeleteSearchSpaceArgs } from "./DeleteSearchSpaceArgs";
import { SearchSpaceCountArgs } from "./SearchSpaceCountArgs";
import { SearchSpaceFindManyArgs } from "./SearchSpaceFindManyArgs";
import { SearchSpaceFindUniqueArgs } from "./SearchSpaceFindUniqueArgs";
import { SearchSpace } from "./SearchSpace";
import { ExperimentFindManyArgs } from "../../experiment/base/ExperimentFindManyArgs";
import { Experiment } from "../../experiment/base/Experiment";
import { ParameterConstraintFindManyArgs } from "../../parameterConstraint/base/ParameterConstraintFindManyArgs";
import { ParameterConstraint } from "../../parameterConstraint/base/ParameterConstraint";
import { ParameterFindManyArgs } from "../../parameter/base/ParameterFindManyArgs";
import { Parameter } from "../../parameter/base/Parameter";
import { SearchSpaceService } from "../searchSpace.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SearchSpace)
export class SearchSpaceResolverBase {
  constructor(
    protected readonly service: SearchSpaceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "read",
    possession: "any",
  })
  async _searchSpacesMeta(
    @graphql.Args() args: SearchSpaceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SearchSpace])
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "read",
    possession: "any",
  })
  async searchSpaces(
    @graphql.Args() args: SearchSpaceFindManyArgs
  ): Promise<SearchSpace[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SearchSpace, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "read",
    possession: "own",
  })
  async searchSpace(
    @graphql.Args() args: SearchSpaceFindUniqueArgs
  ): Promise<SearchSpace | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SearchSpace)
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "create",
    possession: "any",
  })
  async createSearchSpace(
    @graphql.Args() args: CreateSearchSpaceArgs
  ): Promise<SearchSpace> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SearchSpace)
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "update",
    possession: "any",
  })
  async updateSearchSpace(
    @graphql.Args() args: UpdateSearchSpaceArgs
  ): Promise<SearchSpace | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SearchSpace)
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "delete",
    possession: "any",
  })
  async deleteSearchSpace(
    @graphql.Args() args: DeleteSearchSpaceArgs
  ): Promise<SearchSpace | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Experiment], { name: "experiments" })
  @nestAccessControl.UseRoles({
    resource: "Experiment",
    action: "read",
    possession: "any",
  })
  async resolveFieldExperiments(
    @graphql.Parent() parent: SearchSpace,
    @graphql.Args() args: ExperimentFindManyArgs
  ): Promise<Experiment[]> {
    const results = await this.service.findExperiments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ParameterConstraint], {
    name: "parameterConstraints",
  })
  @nestAccessControl.UseRoles({
    resource: "ParameterConstraint",
    action: "read",
    possession: "any",
  })
  async resolveFieldParameterConstraints(
    @graphql.Parent() parent: SearchSpace,
    @graphql.Args() args: ParameterConstraintFindManyArgs
  ): Promise<ParameterConstraint[]> {
    const results = await this.service.findParameterConstraints(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Parameter], { name: "parameters" })
  @nestAccessControl.UseRoles({
    resource: "Parameter",
    action: "read",
    possession: "any",
  })
  async resolveFieldParameters(
    @graphql.Parent() parent: SearchSpace,
    @graphql.Args() args: ParameterFindManyArgs
  ): Promise<Parameter[]> {
    const results = await this.service.findParameters(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
