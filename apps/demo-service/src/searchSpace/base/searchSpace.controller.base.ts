/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SearchSpaceService } from "../searchSpace.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SearchSpaceCreateInput } from "./SearchSpaceCreateInput";
import { SearchSpaceWhereInput } from "./SearchSpaceWhereInput";
import { SearchSpaceWhereUniqueInput } from "./SearchSpaceWhereUniqueInput";
import { SearchSpaceFindManyArgs } from "./SearchSpaceFindManyArgs";
import { SearchSpaceUpdateInput } from "./SearchSpaceUpdateInput";
import { SearchSpace } from "./SearchSpace";
import { ExperimentFindManyArgs } from "../../experiment/base/ExperimentFindManyArgs";
import { Experiment } from "../../experiment/base/Experiment";
import { ExperimentWhereUniqueInput } from "../../experiment/base/ExperimentWhereUniqueInput";
import { ParameterConstraintFindManyArgs } from "../../parameterConstraint/base/ParameterConstraintFindManyArgs";
import { ParameterConstraint } from "../../parameterConstraint/base/ParameterConstraint";
import { ParameterConstraintWhereUniqueInput } from "../../parameterConstraint/base/ParameterConstraintWhereUniqueInput";
import { ParameterFindManyArgs } from "../../parameter/base/ParameterFindManyArgs";
import { Parameter } from "../../parameter/base/Parameter";
import { ParameterWhereUniqueInput } from "../../parameter/base/ParameterWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SearchSpaceControllerBase {
  constructor(
    protected readonly service: SearchSpaceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SearchSpace })
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(
    @common.Body() data: SearchSpaceCreateInput
  ): Promise<SearchSpace> {
    return await this.service.create({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SearchSpace] })
  @ApiNestedQuery(SearchSpaceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<SearchSpace[]> {
    const args = plainToClass(SearchSpaceFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SearchSpace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: SearchSpaceWhereUniqueInput
  ): Promise<SearchSpace | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SearchSpace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: SearchSpaceWhereUniqueInput,
    @common.Body() data: SearchSpaceUpdateInput
  ): Promise<SearchSpace | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SearchSpace })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: SearchSpaceWhereUniqueInput
  ): Promise<SearchSpace | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/experiments")
  @ApiNestedQuery(ExperimentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Experiment",
    action: "read",
    possession: "any",
  })
  async findManyExperiments(
    @common.Req() request: Request,
    @common.Param() params: SearchSpaceWhereUniqueInput
  ): Promise<Experiment[]> {
    const query = plainToClass(ExperimentFindManyArgs, request.query);
    const results = await this.service.findExperiments(params.id, {
      ...query,
      select: {
        createdAt: true,
        goal: true,
        id: true,
        name: true,

        optimizationConfig: {
          select: {
            id: true,
          },
        },

        owner: {
          select: {
            id: true,
          },
        },

        searchSpace: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/experiments")
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "update",
    possession: "any",
  })
  async connectExperiments(
    @common.Param() params: SearchSpaceWhereUniqueInput,
    @common.Body() body: ExperimentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experiments: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/experiments")
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "update",
    possession: "any",
  })
  async updateExperiments(
    @common.Param() params: SearchSpaceWhereUniqueInput,
    @common.Body() body: ExperimentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experiments: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/experiments")
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "update",
    possession: "any",
  })
  async disconnectExperiments(
    @common.Param() params: SearchSpaceWhereUniqueInput,
    @common.Body() body: ExperimentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      experiments: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/parameterConstraints")
  @ApiNestedQuery(ParameterConstraintFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ParameterConstraint",
    action: "read",
    possession: "any",
  })
  async findManyParameterConstraints(
    @common.Req() request: Request,
    @common.Param() params: SearchSpaceWhereUniqueInput
  ): Promise<ParameterConstraint[]> {
    const query = plainToClass(ParameterConstraintFindManyArgs, request.query);
    const results = await this.service.findParameterConstraints(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        searchSpace: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/parameterConstraints")
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "update",
    possession: "any",
  })
  async connectParameterConstraints(
    @common.Param() params: SearchSpaceWhereUniqueInput,
    @common.Body() body: ParameterConstraintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parameterConstraints: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/parameterConstraints")
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "update",
    possession: "any",
  })
  async updateParameterConstraints(
    @common.Param() params: SearchSpaceWhereUniqueInput,
    @common.Body() body: ParameterConstraintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parameterConstraints: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/parameterConstraints")
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "update",
    possession: "any",
  })
  async disconnectParameterConstraints(
    @common.Param() params: SearchSpaceWhereUniqueInput,
    @common.Body() body: ParameterConstraintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parameterConstraints: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/parameters")
  @ApiNestedQuery(ParameterFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Parameter",
    action: "read",
    possession: "any",
  })
  async findManyParameters(
    @common.Req() request: Request,
    @common.Param() params: SearchSpaceWhereUniqueInput
  ): Promise<Parameter[]> {
    const query = plainToClass(ParameterFindManyArgs, request.query);
    const results = await this.service.findParameters(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        parameterBody: true,
        parameterClass: true,
        parameterName: true,

        searchSpace: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/parameters")
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "update",
    possession: "any",
  })
  async connectParameters(
    @common.Param() params: SearchSpaceWhereUniqueInput,
    @common.Body() body: ParameterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parameters: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/parameters")
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "update",
    possession: "any",
  })
  async updateParameters(
    @common.Param() params: SearchSpaceWhereUniqueInput,
    @common.Body() body: ParameterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parameters: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/parameters")
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "update",
    possession: "any",
  })
  async disconnectParameters(
    @common.Param() params: SearchSpaceWhereUniqueInput,
    @common.Body() body: ParameterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parameters: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
