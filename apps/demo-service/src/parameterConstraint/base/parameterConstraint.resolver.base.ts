/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateParameterConstraintArgs } from "./CreateParameterConstraintArgs";
import { UpdateParameterConstraintArgs } from "./UpdateParameterConstraintArgs";
import { DeleteParameterConstraintArgs } from "./DeleteParameterConstraintArgs";
import { ParameterConstraintCountArgs } from "./ParameterConstraintCountArgs";
import { ParameterConstraintFindManyArgs } from "./ParameterConstraintFindManyArgs";
import { ParameterConstraintFindUniqueArgs } from "./ParameterConstraintFindUniqueArgs";
import { ParameterConstraint } from "./ParameterConstraint";
import { SearchSpace } from "../../searchSpace/base/SearchSpace";
import { ParameterConstraintService } from "../parameterConstraint.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ParameterConstraint)
export class ParameterConstraintResolverBase {
  constructor(
    protected readonly service: ParameterConstraintService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ParameterConstraint",
    action: "read",
    possession: "any",
  })
  async _parameterConstraintsMeta(
    @graphql.Args() args: ParameterConstraintCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ParameterConstraint])
  @nestAccessControl.UseRoles({
    resource: "ParameterConstraint",
    action: "read",
    possession: "any",
  })
  async parameterConstraints(
    @graphql.Args() args: ParameterConstraintFindManyArgs
  ): Promise<ParameterConstraint[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ParameterConstraint, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ParameterConstraint",
    action: "read",
    possession: "own",
  })
  async parameterConstraint(
    @graphql.Args() args: ParameterConstraintFindUniqueArgs
  ): Promise<ParameterConstraint | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParameterConstraint)
  @nestAccessControl.UseRoles({
    resource: "ParameterConstraint",
    action: "create",
    possession: "any",
  })
  async createParameterConstraint(
    @graphql.Args() args: CreateParameterConstraintArgs
  ): Promise<ParameterConstraint> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        searchSpace: args.data.searchSpace
          ? {
              connect: args.data.searchSpace,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParameterConstraint)
  @nestAccessControl.UseRoles({
    resource: "ParameterConstraint",
    action: "update",
    possession: "any",
  })
  async updateParameterConstraint(
    @graphql.Args() args: UpdateParameterConstraintArgs
  ): Promise<ParameterConstraint | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          searchSpace: args.data.searchSpace
            ? {
                connect: args.data.searchSpace,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ParameterConstraint)
  @nestAccessControl.UseRoles({
    resource: "ParameterConstraint",
    action: "delete",
    possession: "any",
  })
  async deleteParameterConstraint(
    @graphql.Args() args: DeleteParameterConstraintArgs
  ): Promise<ParameterConstraint | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SearchSpace, {
    nullable: true,
    name: "searchSpace",
  })
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "read",
    possession: "any",
  })
  async resolveFieldSearchSpace(
    @graphql.Parent() parent: ParameterConstraint
  ): Promise<SearchSpace | null> {
    const result = await this.service.getSearchSpace(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
