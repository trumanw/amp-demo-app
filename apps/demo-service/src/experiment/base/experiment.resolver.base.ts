/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateExperimentArgs } from "./CreateExperimentArgs";
import { UpdateExperimentArgs } from "./UpdateExperimentArgs";
import { DeleteExperimentArgs } from "./DeleteExperimentArgs";
import { ExperimentCountArgs } from "./ExperimentCountArgs";
import { ExperimentFindManyArgs } from "./ExperimentFindManyArgs";
import { ExperimentFindUniqueArgs } from "./ExperimentFindUniqueArgs";
import { Experiment } from "./Experiment";
import { OptimizationConfig } from "../../optimizationConfig/base/OptimizationConfig";
import { User } from "../../user/base/User";
import { SearchSpace } from "../../searchSpace/base/SearchSpace";
import { ExperimentService } from "../experiment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Experiment)
export class ExperimentResolverBase {
  constructor(
    protected readonly service: ExperimentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Experiment",
    action: "read",
    possession: "any",
  })
  async _experimentsMeta(
    @graphql.Args() args: ExperimentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Experiment])
  @nestAccessControl.UseRoles({
    resource: "Experiment",
    action: "read",
    possession: "any",
  })
  async experiments(
    @graphql.Args() args: ExperimentFindManyArgs
  ): Promise<Experiment[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Experiment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Experiment",
    action: "read",
    possession: "own",
  })
  async experiment(
    @graphql.Args() args: ExperimentFindUniqueArgs
  ): Promise<Experiment | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Experiment)
  @nestAccessControl.UseRoles({
    resource: "Experiment",
    action: "create",
    possession: "any",
  })
  async createExperiment(
    @graphql.Args() args: CreateExperimentArgs
  ): Promise<Experiment> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        optimizationConfig: args.data.optimizationConfig
          ? {
              connect: args.data.optimizationConfig,
            }
          : undefined,

        owner: {
          connect: args.data.owner,
        },

        searchSpace: args.data.searchSpace
          ? {
              connect: args.data.searchSpace,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Experiment)
  @nestAccessControl.UseRoles({
    resource: "Experiment",
    action: "update",
    possession: "any",
  })
  async updateExperiment(
    @graphql.Args() args: UpdateExperimentArgs
  ): Promise<Experiment | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          optimizationConfig: args.data.optimizationConfig
            ? {
                connect: args.data.optimizationConfig,
              }
            : undefined,

          owner: {
            connect: args.data.owner,
          },

          searchSpace: args.data.searchSpace
            ? {
                connect: args.data.searchSpace,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Experiment)
  @nestAccessControl.UseRoles({
    resource: "Experiment",
    action: "delete",
    possession: "any",
  })
  async deleteExperiment(
    @graphql.Args() args: DeleteExperimentArgs
  ): Promise<Experiment | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OptimizationConfig, {
    nullable: true,
    name: "optimizationConfig",
  })
  @nestAccessControl.UseRoles({
    resource: "OptimizationConfig",
    action: "read",
    possession: "any",
  })
  async resolveFieldOptimizationConfig(
    @graphql.Parent() parent: Experiment
  ): Promise<OptimizationConfig | null> {
    const result = await this.service.getOptimizationConfig(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "owner",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldOwner(
    @graphql.Parent() parent: Experiment
  ): Promise<User | null> {
    const result = await this.service.getOwner(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SearchSpace, {
    nullable: true,
    name: "searchSpace",
  })
  @nestAccessControl.UseRoles({
    resource: "SearchSpace",
    action: "read",
    possession: "any",
  })
  async resolveFieldSearchSpace(
    @graphql.Parent() parent: Experiment
  ): Promise<SearchSpace | null> {
    const result = await this.service.getSearchSpace(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
