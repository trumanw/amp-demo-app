# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EnumExperimentGoal {
  Moo
}

enum EnumParameterSpaceParameterType {
  Choice
  Fixed
  Range
}

enum EnumParameterSpaceValueType {
  Bool
  Float
  Int
  String
}

type Experiment {
  createdAt: DateTime!
  goal: EnumExperimentGoal
  id: String!
  name: String!
  owner: User
  parameterSpace(orderBy: [ParameterSpaceOrderByInput!], skip: Float, take: Float, where: ParameterSpaceWhereInput): [ParameterSpace!]!
  updatedAt: DateTime!
}

input ExperimentCreateInput {
  goal: EnumExperimentGoal!
  name: String!
  owner: UserWhereUniqueInput!
  parameterSpace: ParameterSpaceCreateNestedManyWithoutExperimentsInput
}

input ExperimentCreateNestedManyWithoutParameterSpacesInput {
  connect: [ExperimentWhereUniqueInput!]
}

input ExperimentListRelationFilter {
  every: ExperimentWhereInput
  none: ExperimentWhereInput
  some: ExperimentWhereInput
}

input ExperimentOrderByInput {
  User: SortOrder
  createdAt: SortOrder
  goal: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ExperimentUpdateInput {
  goal: EnumExperimentGoal
  name: String
  owner: UserWhereUniqueInput
  parameterSpace: ParameterSpaceUpdateManyWithoutExperimentsInput
}

input ExperimentUpdateManyWithoutParameterSpacesInput {
  connect: [ExperimentWhereUniqueInput!]
  disconnect: [ExperimentWhereUniqueInput!]
  set: [ExperimentWhereUniqueInput!]
}

input ExperimentWhereInput {
  goal: EnumExperimentGoal
  id: StringFilter
  name: StringFilter
  parameterSpace: ParameterSpaceListRelationFilter
}

input ExperimentWhereUniqueInput {
  id: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createExperiment(data: ExperimentCreateInput!): Experiment!
  createParameterSpace(data: ParameterSpaceCreateInput!): ParameterSpace!
  createUser(data: UserCreateInput!): User!
  deleteExperiment(where: ExperimentWhereUniqueInput!): Experiment!
  deleteParameterSpace(where: ParameterSpaceWhereUniqueInput!): ParameterSpace!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateExperiment(data: ExperimentUpdateInput!, where: ExperimentWhereUniqueInput!): Experiment!
  updateParameterSpace(data: ParameterSpaceUpdateInput!, where: ParameterSpaceWhereUniqueInput!): ParameterSpace!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type ParameterSpace {
  bounds: JSON
  createdAt: DateTime!
  experiments(orderBy: [ExperimentOrderByInput!], skip: Float, take: Float, where: ExperimentWhereInput): [Experiment!]!
  id: String!
  name: String
  parameterType: EnumParameterSpaceParameterType
  updatedAt: DateTime!
  valueType: EnumParameterSpaceValueType
}

input ParameterSpaceCreateInput {
  bounds: JSON
  experiments: ExperimentCreateNestedManyWithoutParameterSpacesInput
  name: String
  parameterType: EnumParameterSpaceParameterType!
  valueType: EnumParameterSpaceValueType
}

input ParameterSpaceCreateNestedManyWithoutExperimentsInput {
  connect: [ParameterSpaceWhereUniqueInput!]
}

input ParameterSpaceListRelationFilter {
  every: ParameterSpaceWhereInput
  none: ParameterSpaceWhereInput
  some: ParameterSpaceWhereInput
}

input ParameterSpaceOrderByInput {
  bounds: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  parameterType: SortOrder
  updatedAt: SortOrder
  valueType: SortOrder
}

input ParameterSpaceUpdateInput {
  bounds: JSON
  experiments: ExperimentUpdateManyWithoutParameterSpacesInput
  name: String
  parameterType: EnumParameterSpaceParameterType
  valueType: EnumParameterSpaceValueType
}

input ParameterSpaceUpdateManyWithoutExperimentsInput {
  connect: [ParameterSpaceWhereUniqueInput!]
  disconnect: [ParameterSpaceWhereUniqueInput!]
  set: [ParameterSpaceWhereUniqueInput!]
}

input ParameterSpaceWhereInput {
  bounds: JsonFilter
  experiments: ExperimentListRelationFilter
  id: StringFilter
  name: StringNullableFilter
  parameterType: EnumParameterSpaceParameterType
  valueType: EnumParameterSpaceValueType
}

input ParameterSpaceWhereUniqueInput {
  id: String!
}

type Query {
  _experimentsMeta(where: ExperimentWhereInput): MetaQueryPayload!
  _parameterSpacesMeta(where: ParameterSpaceWhereInput): MetaQueryPayload!
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  experiment(where: ExperimentWhereUniqueInput!): Experiment
  experiments(orderBy: [ExperimentOrderByInput!], skip: Float, take: Float, where: ExperimentWhereInput): [Experiment!]!
  parameterSpace(where: ParameterSpaceWhereUniqueInput!): ParameterSpace
  parameterSpaces(orderBy: [ParameterSpaceOrderByInput!], skip: Float, take: Float, where: ParameterSpaceWhereInput): [ParameterSpace!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  experiments: Experiment
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  experiments: ExperimentWhereUniqueInput
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  experimentsId: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  experiments: ExperimentWhereUniqueInput
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  experiments: ExperimentWhereUniqueInput
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
