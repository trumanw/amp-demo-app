# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EnumExperimentGoal {
  Moo
}

enum EnumTrialTrialType {
  Autogen
  Init
  Valid
}

type Experiment {
  createdAt: DateTime!
  goal: EnumExperimentGoal
  id: String!
  name: String!
  optimizationConfig: OptimizationConfig
  owner: User
  searchSpace: SearchSpace
  trials(orderBy: [TrialOrderByInput!], skip: Float, take: Float, where: TrialWhereInput): [Trial!]!
  updatedAt: DateTime!
}

input ExperimentCreateInput {
  goal: EnumExperimentGoal!
  name: String!
  optimizationConfig: OptimizationConfigWhereUniqueInput
  owner: UserWhereUniqueInput!
  searchSpace: SearchSpaceWhereUniqueInput
  trials: TrialCreateNestedManyWithoutExperimentsInput
}

input ExperimentCreateNestedManyWithoutOptimizationConfigsInput {
  connect: [ExperimentWhereUniqueInput!]
}

input ExperimentCreateNestedManyWithoutSearchSpacesInput {
  connect: [ExperimentWhereUniqueInput!]
}

input ExperimentListRelationFilter {
  every: ExperimentWhereInput
  none: ExperimentWhereInput
  some: ExperimentWhereInput
}

input ExperimentOrderByInput {
  User: SortOrder
  createdAt: SortOrder
  goal: SortOrder
  id: SortOrder
  name: SortOrder
  optimizationConfigId: SortOrder
  searchSpaceId: SortOrder
  updatedAt: SortOrder
}

input ExperimentUpdateInput {
  goal: EnumExperimentGoal
  name: String
  optimizationConfig: OptimizationConfigWhereUniqueInput
  owner: UserWhereUniqueInput
  searchSpace: SearchSpaceWhereUniqueInput
  trials: TrialUpdateManyWithoutExperimentsInput
}

input ExperimentUpdateManyWithoutOptimizationConfigsInput {
  connect: [ExperimentWhereUniqueInput!]
  disconnect: [ExperimentWhereUniqueInput!]
  set: [ExperimentWhereUniqueInput!]
}

input ExperimentUpdateManyWithoutSearchSpacesInput {
  connect: [ExperimentWhereUniqueInput!]
  disconnect: [ExperimentWhereUniqueInput!]
  set: [ExperimentWhereUniqueInput!]
}

input ExperimentWhereInput {
  goal: EnumExperimentGoal
  id: StringFilter
  name: StringFilter
  optimizationConfig: OptimizationConfigWhereUniqueInput
  searchSpace: SearchSpaceWhereUniqueInput
  trials: TrialListRelationFilter
}

input ExperimentWhereUniqueInput {
  id: String!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createExperiment(data: ExperimentCreateInput!): Experiment!
  createObjective(data: ObjectiveCreateInput!): Objective!
  createOptimizationConfig(data: OptimizationConfigCreateInput!): OptimizationConfig!
  createParameter(data: ParameterCreateInput!): Parameter!
  createSearchSpace(data: SearchSpaceCreateInput!): SearchSpace!
  createTrial(data: TrialCreateInput!): Trial!
  createUser(data: UserCreateInput!): User!
  deleteExperiment(where: ExperimentWhereUniqueInput!): Experiment!
  deleteObjective(where: ObjectiveWhereUniqueInput!): Objective!
  deleteOptimizationConfig(where: OptimizationConfigWhereUniqueInput!): OptimizationConfig!
  deleteParameter(where: ParameterWhereUniqueInput!): Parameter!
  deleteSearchSpace(where: SearchSpaceWhereUniqueInput!): SearchSpace!
  deleteTrial(where: TrialWhereUniqueInput!): Trial!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateExperiment(data: ExperimentUpdateInput!, where: ExperimentWhereUniqueInput!): Experiment!
  updateObjective(data: ObjectiveUpdateInput!, where: ObjectiveWhereUniqueInput!): Objective!
  updateOptimizationConfig(data: OptimizationConfigUpdateInput!, where: OptimizationConfigWhereUniqueInput!): OptimizationConfig!
  updateParameter(data: ParameterUpdateInput!, where: ParameterWhereUniqueInput!): Parameter!
  updateSearchSpace(data: SearchSpaceUpdateInput!, where: SearchSpaceWhereUniqueInput!): SearchSpace!
  updateTrial(data: TrialUpdateInput!, where: TrialWhereUniqueInput!): Trial!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Objective {
  createdAt: DateTime!
  id: String!
  objectiveBody: String
  objectiveClass: String
  objectiveName: String
  optimizationConfig: OptimizationConfig
  updatedAt: DateTime!
}

input ObjectiveCreateInput {
  objectiveBody: String
  objectiveClass: String
  objectiveName: String
  optimizationConfig: OptimizationConfigWhereUniqueInput
}

input ObjectiveCreateNestedManyWithoutOptimizationConfigsInput {
  connect: [ObjectiveWhereUniqueInput!]
}

input ObjectiveListRelationFilter {
  every: ObjectiveWhereInput
  none: ObjectiveWhereInput
  some: ObjectiveWhereInput
}

input ObjectiveOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  objectiveBody: SortOrder
  objectiveClass: SortOrder
  objectiveName: SortOrder
  optimizationConfigId: SortOrder
  updatedAt: SortOrder
}

input ObjectiveUpdateInput {
  objectiveBody: String
  objectiveClass: String
  objectiveName: String
  optimizationConfig: OptimizationConfigWhereUniqueInput
}

input ObjectiveUpdateManyWithoutOptimizationConfigsInput {
  connect: [ObjectiveWhereUniqueInput!]
  disconnect: [ObjectiveWhereUniqueInput!]
  set: [ObjectiveWhereUniqueInput!]
}

input ObjectiveWhereInput {
  id: StringFilter
  objectiveBody: StringNullableFilter
  objectiveClass: StringNullableFilter
  objectiveName: StringNullableFilter
  optimizationConfig: OptimizationConfigWhereUniqueInput
}

input ObjectiveWhereUniqueInput {
  id: String!
}

type OptimizationConfig {
  createdAt: DateTime!
  experiments(orderBy: [ExperimentOrderByInput!], skip: Float, take: Float, where: ExperimentWhereInput): [Experiment!]!
  id: String!
  objectives(orderBy: [ObjectiveOrderByInput!], skip: Float, take: Float, where: ObjectiveWhereInput): [Objective!]!
  outcomeConstraints: String
  updatedAt: DateTime!
}

input OptimizationConfigCreateInput {
  experiments: ExperimentCreateNestedManyWithoutOptimizationConfigsInput
  objectives: ObjectiveCreateNestedManyWithoutOptimizationConfigsInput
  outcomeConstraints: String
}

input OptimizationConfigOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  outcomeConstraints: SortOrder
  updatedAt: SortOrder
}

input OptimizationConfigUpdateInput {
  experiments: ExperimentUpdateManyWithoutOptimizationConfigsInput
  objectives: ObjectiveUpdateManyWithoutOptimizationConfigsInput
  outcomeConstraints: String
}

input OptimizationConfigWhereInput {
  experiments: ExperimentListRelationFilter
  id: StringFilter
  objectives: ObjectiveListRelationFilter
  outcomeConstraints: StringNullableFilter
}

input OptimizationConfigWhereUniqueInput {
  id: String!
}

type Parameter {
  createdAt: DateTime!
  id: String!
  parameterBody: String
  parameterClass: String
  parameterName: String
  searchSpace: SearchSpace
  updatedAt: DateTime!
}

input ParameterCreateInput {
  parameterBody: String
  parameterClass: String
  parameterName: String
  searchSpace: SearchSpaceWhereUniqueInput
}

input ParameterCreateNestedManyWithoutSearchSpacesInput {
  connect: [ParameterWhereUniqueInput!]
}

input ParameterListRelationFilter {
  every: ParameterWhereInput
  none: ParameterWhereInput
  some: ParameterWhereInput
}

input ParameterOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  parameterBody: SortOrder
  parameterClass: SortOrder
  parameterName: SortOrder
  searchSpaceId: SortOrder
  updatedAt: SortOrder
}

input ParameterUpdateInput {
  parameterBody: String
  parameterClass: String
  parameterName: String
  searchSpace: SearchSpaceWhereUniqueInput
}

input ParameterUpdateManyWithoutSearchSpacesInput {
  connect: [ParameterWhereUniqueInput!]
  disconnect: [ParameterWhereUniqueInput!]
  set: [ParameterWhereUniqueInput!]
}

input ParameterWhereInput {
  id: StringFilter
  parameterBody: StringNullableFilter
  parameterClass: StringNullableFilter
  parameterName: StringNullableFilter
  searchSpace: SearchSpaceWhereUniqueInput
}

input ParameterWhereUniqueInput {
  id: String!
}

type Query {
  _experimentsMeta(where: ExperimentWhereInput): MetaQueryPayload!
  _objectivesMeta(where: ObjectiveWhereInput): MetaQueryPayload!
  _optimizationConfigsMeta(where: OptimizationConfigWhereInput): MetaQueryPayload!
  _parametersMeta(where: ParameterWhereInput): MetaQueryPayload!
  _searchSpacesMeta(where: SearchSpaceWhereInput): MetaQueryPayload!
  _trialsMeta(where: TrialWhereInput): MetaQueryPayload!
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  experiment(where: ExperimentWhereUniqueInput!): Experiment
  experiments(orderBy: [ExperimentOrderByInput!], skip: Float, take: Float, where: ExperimentWhereInput): [Experiment!]!
  objective(where: ObjectiveWhereUniqueInput!): Objective
  objectives(orderBy: [ObjectiveOrderByInput!], skip: Float, take: Float, where: ObjectiveWhereInput): [Objective!]!
  optimizationConfig(where: OptimizationConfigWhereUniqueInput!): OptimizationConfig
  optimizationConfigs(orderBy: [OptimizationConfigOrderByInput!], skip: Float, take: Float, where: OptimizationConfigWhereInput): [OptimizationConfig!]!
  parameter(where: ParameterWhereUniqueInput!): Parameter
  parameters(orderBy: [ParameterOrderByInput!], skip: Float, take: Float, where: ParameterWhereInput): [Parameter!]!
  searchSpace(where: SearchSpaceWhereUniqueInput!): SearchSpace
  searchSpaces(orderBy: [SearchSpaceOrderByInput!], skip: Float, take: Float, where: SearchSpaceWhereInput): [SearchSpace!]!
  trial(where: TrialWhereUniqueInput!): Trial
  trials(orderBy: [TrialOrderByInput!], skip: Float, take: Float, where: TrialWhereInput): [Trial!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

type SearchSpace {
  createdAt: DateTime!
  experiments(orderBy: [ExperimentOrderByInput!], skip: Float, take: Float, where: ExperimentWhereInput): [Experiment!]!
  id: String!
  parameters(orderBy: [ParameterOrderByInput!], skip: Float, take: Float, where: ParameterWhereInput): [Parameter!]!
  updatedAt: DateTime!
}

input SearchSpaceCreateInput {
  experiments: ExperimentCreateNestedManyWithoutSearchSpacesInput
  parameters: ParameterCreateNestedManyWithoutSearchSpacesInput
}

input SearchSpaceOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input SearchSpaceUpdateInput {
  experiments: ExperimentUpdateManyWithoutSearchSpacesInput
  parameters: ParameterUpdateManyWithoutSearchSpacesInput
}

input SearchSpaceWhereInput {
  experiments: ExperimentListRelationFilter
  id: StringFilter
  parameters: ParameterListRelationFilter
}

input SearchSpaceWhereUniqueInput {
  id: String!
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Trial {
  createdAt: DateTime!
  experiment: Experiment
  id: String!
  trialBody: JSON
  trialIndex: Float!
  trialType: EnumTrialTrialType
  updatedAt: DateTime!
}

input TrialCreateInput {
  experiment: ExperimentWhereUniqueInput
  trialBody: JSON
  trialIndex: Float!
  trialType: EnumTrialTrialType
}

input TrialCreateNestedManyWithoutExperimentsInput {
  connect: [TrialWhereUniqueInput!]
}

input TrialListRelationFilter {
  every: TrialWhereInput
  none: TrialWhereInput
  some: TrialWhereInput
}

input TrialOrderByInput {
  createdAt: SortOrder
  experimentId: SortOrder
  id: SortOrder
  trialBody: SortOrder
  trialIndex: SortOrder
  trialType: SortOrder
  updatedAt: SortOrder
}

input TrialUpdateInput {
  experiment: ExperimentWhereUniqueInput
  trialBody: JSON
  trialIndex: Float
  trialType: EnumTrialTrialType
}

input TrialUpdateManyWithoutExperimentsInput {
  connect: [TrialWhereUniqueInput!]
  disconnect: [TrialWhereUniqueInput!]
  set: [TrialWhereUniqueInput!]
}

input TrialWhereInput {
  experiment: ExperimentWhereUniqueInput
  id: StringFilter
  trialBody: JsonFilter
  trialIndex: IntFilter
  trialType: EnumTrialTrialType
}

input TrialWhereUniqueInput {
  id: String!
}

type User {
  createdAt: DateTime!
  experiments: Experiment
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  experiments: ExperimentWhereUniqueInput
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  experimentsId: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  experiments: ExperimentWhereUniqueInput
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  experiments: ExperimentWhereUniqueInput
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
